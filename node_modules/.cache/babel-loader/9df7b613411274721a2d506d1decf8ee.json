{"ast":null,"code":"import { authHeader } from \"../_helpers\";\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch(\"/users/authenticate\", requestOptions).then(response => {\n    if (!response.ok) {\n      return Promise.reject(response.statusText);\n    }\n\n    return response.json();\n  }).then(user => {\n    // login successful if there's a jwt token in the response\n    if (user && user.token) {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem(\"user\", JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(\"/users\", requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(\"/users/\" + id, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(\"/users/register\", requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(),\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(\"/users/\" + user.id, requestOptions).then(handleResponse);\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader()\n  };\n  return fetch(\"/users/\" + id, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  if (!response.ok) {\n    return Promise.reject(response.statusText);\n  }\n\n  return response.json();\n}\n\nexport default userService;","map":{"version":3,"sources":["D:/Materi Kuliah/SEM 7/Magang/ReactTutorial/user_registration/src/_services/user.service.js"],"names":["authHeader","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","ok","Promise","reject","statusText","json","user","token","localStorage","setItem","removeItem","handleResponse","id"],"mappings":"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","sourcesContent":["import { authHeader } from \"../_helpers\";\r\n\r\nexport const userService = {\r\n  login,\r\n  logout,\r\n  register,\r\n  getAll,\r\n  getById,\r\n  update,\r\n  delete: _delete,\r\n};\r\n\r\nfunction login(username, password) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ username, password }),\r\n  };\r\n\r\n  return fetch(\"/users/authenticate\", requestOptions)\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        return Promise.reject(response.statusText);\r\n      }\r\n\r\n      return response.json();\r\n    })\r\n    .then((user) => {\r\n      // login successful if there's a jwt token in the response\r\n      if (user && user.token) {\r\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n        localStorage.setItem(\"user\", JSON.stringify(user));\r\n      }\r\n\r\n      return user;\r\n    });\r\n}\r\n\r\nfunction logout() {\r\n  // remove user from local storage to log user out\r\n  localStorage.removeItem(\"user\");\r\n}\r\n\r\nfunction getAll() {\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: authHeader(),\r\n  };\r\n\r\n  return fetch(\"/users\", requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getById(id) {\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: authHeader(),\r\n  };\r\n\r\n  return fetch(\"/users/\" + id, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction register(user) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(user),\r\n  };\r\n\r\n  return fetch(\"/users/register\", requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction update(user) {\r\n  const requestOptions = {\r\n    method: \"PUT\",\r\n    headers: { ...authHeader(), \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(user),\r\n  };\r\n\r\n  return fetch(\"/users/\" + user.id, requestOptions).then(handleResponse);\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n  const requestOptions = {\r\n    method: \"DELETE\",\r\n    headers: authHeader(),\r\n  };\r\n\r\n  return fetch(\"/users/\" + id, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n  if (!response.ok) {\r\n    return Promise.reject(response.statusText);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\nexport default userService;\r\n"]},"metadata":{},"sourceType":"module"}