{"ast":null,"code":"// import config from \"config\";\nimport { authHeader } from \"../_helpers\";\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch(`${config.apiUrl}/users/authenticate`, requestOptions).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem(\"user\", JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`${config.apiUrl}/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader()\n  };\n  return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`${config.apiUrl}/users/register`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(),\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`${config.apiUrl}/users/${user.id}`, requestOptions).then(handleResponse);\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader()\n  };\n  return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["D:/Materi Kuliah/SEM 7/Magang/ReactTutorial/user_registration/src/_services/user.service.js"],"names":["authHeader","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","config","apiUrl","then","handleResponse","user","localStorage","setItem","removeItem","id","response","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["// import config from \"config\";\r\nimport { authHeader } from \"../_helpers\";\r\n\r\nexport const userService = {\r\n  login,\r\n  logout,\r\n  register,\r\n  getAll,\r\n  getById,\r\n  update,\r\n  delete: _delete,\r\n};\r\n\r\nfunction login(username, password) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ username, password }),\r\n  };\r\n\r\n  return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\r\n    .then(handleResponse)\r\n    .then((user) => {\r\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n\r\n      return user;\r\n    });\r\n}\r\n\r\nfunction logout() {\r\n  // remove user from local storage to log user out\r\n  localStorage.removeItem(\"user\");\r\n}\r\n\r\nfunction getAll() {\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: authHeader(),\r\n  };\r\n\r\n  return fetch(`${config.apiUrl}/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getById(id) {\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: authHeader(),\r\n  };\r\n\r\n  return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(\r\n    handleResponse\r\n  );\r\n}\r\n\r\nfunction register(user) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(user),\r\n  };\r\n\r\n  return fetch(`${config.apiUrl}/users/register`, requestOptions).then(\r\n    handleResponse\r\n  );\r\n}\r\n\r\nfunction update(user) {\r\n  const requestOptions = {\r\n    method: \"PUT\",\r\n    headers: { ...authHeader(), \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(user),\r\n  };\r\n\r\n  return fetch(`${config.apiUrl}/users/${user.id}`, requestOptions).then(\r\n    handleResponse\r\n  );\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n  const requestOptions = {\r\n    method: \"DELETE\",\r\n    headers: authHeader(),\r\n  };\r\n\r\n  return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(\r\n    handleResponse\r\n  );\r\n}\r\n\r\nfunction handleResponse(response) {\r\n  return response.text().then((text) => {\r\n    const data = text && JSON.parse(text);\r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        // auto logout if 401 response returned from api\r\n        logout();\r\n        // location.reload(true);\r\n      }\r\n\r\n      const error = (data && data.message) || response.statusText;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return data;\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}